module test_fsomu
use pfunit_mod
implicit none

@testcase
    type, extends(TestCase) :: type_rsphso
        double precision, allocatable, dimension(:, :) :: h2
        double precision, allocatable, dimension(:, :) :: fc
        double precision, allocatable, dimension(:, :) :: udv
        double precision, allocatable, dimension(:) :: wrk
    contains
        procedure :: setUp, tearDown
    end type

contains

subroutine setUp(this)
    use inforb_mod, only: muld2h, nsym, norbt, nisht, nasht
    use infind_mod, only: ismo, isx
    use wrkrsp_mod, only: ksymop
    class(type_rsphso), intent(inout) :: this
    
    integer i

    muld2h = reshape(&
             (/1,2,3,4,5,6,7,8, &
               2,1,4,3,6,5,8,7, &
               3,4,1,2,7,8,5,6, &
               4,3,2,1,8,7,6,5, &
               5,6,7,8,1,2,3,4, &
               6,5,8,7,2,1,4,3, &
               7,8,5,6,3,4,1,2, &
               8,7,6,5,4,3,2,1/), (/8, 8/))
    nsym = 1
    norbt = 6
    nisht = 1
    nasht = 2
    ismo(1:norbt) = 1
    do i=1,norbt
        isx(i) = i
    end do

    ksymop = 1

    allocate(this%h2(norbt, norbt))
    allocate(this%fc(norbt, norbt))
    allocate(this%wrk(10))
end subroutine setUp

subroutine tearDown(this)
    class(type_rsphso), intent(inout) :: this
    deallocate(this%h2)
    deallocate(this%fc)
    deallocate(this%wrk)
end subroutine tearDown


@test
subroutine test_ceqd_gives_naught(this)
    use rsphso_mod, only: fsomu
    class(type_rsphso), intent(inout) :: this

    this%h2 = 1d0
    this%fc = 0d0

    call fsomu(1, 1, this%h2, this%fc, this%udv, this%wrk, size(this%wrk))
    @assertEqual(maxval(abs(this%fc)), 0d0)
end subroutine

@test
subroutine test_fi_zero_input(this)
    use rsphso_mod, only: fsomu
    class(type_rsphso), intent(inout) :: this


    this%h2 = 0d0
    this%fc = 0d0


    call fsomu(2, 1, this%h2, this%fc, this%udv, this%wrk, size(this%wrk))
    @assertEqual(maxval(abs(this%fc)), 0d0)
end subroutine

@test
subroutine test_fi_coulomb(this)
    use rsphso_mod, only: fsomu_c
    class(type_rsphso), intent(inout) :: this
    double precision:: ref_fc(6, 6) = 0d0


    this%h2 = 1d0
    this%fc = 0d0
    ref_fc(2, 1) = 2d0
    ref_fc(1, 2) = -2d0

    call fsomu_c(2, 1, this%h2, this%fc, this%udv, this%wrk, size(this%wrk))
    @assertEqual(0d0, maxval(abs(this%fc - ref_fc)))
end subroutine

end module test_fsomu

