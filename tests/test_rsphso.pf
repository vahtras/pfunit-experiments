module test_so_fock
use pfunit_mod
implicit none

@testcase
    type, extends(TestCase) :: type_rsphso
        double precision, allocatable, dimension(:, :) :: h2
        double precision, allocatable, dimension(:, :) :: fi
        double precision, allocatable, dimension(:, :) :: fa
        double precision, allocatable, dimension(:, :) :: q
        double precision, allocatable, dimension(:, :) :: udv
        double precision, allocatable, dimension(:, :, :, :) :: pv
        double precision, allocatable, dimension(:) :: wrk
    contains
        procedure :: setUp, tearDown
    end type

contains

subroutine setUp(this)
    use inforb_mod, only: muld2h, nsym, norbt, nisht, nasht, n2ashx, &
        iorb, norb, nish, iash ,nash, nocc
    use infind_mod, only: ismo, isx, isw, iobtyp, ich
    use wrkrsp_mod, only: ksymop
    class(type_rsphso), intent(inout) :: this
    
    integer i

    muld2h = reshape(&
             (/1,2,3,4,5,6,7,8, &
               2,1,4,3,6,5,8,7, &
               3,4,1,2,7,8,5,6, &
               4,3,2,1,8,7,6,5, &
               5,6,7,8,1,2,3,4, &
               6,5,8,7,2,1,4,3, &
               7,8,5,6,3,4,1,2, &
               8,7,6,5,4,3,2,1/), (/8, 8/))
! inforb.h
    nsym = 1
    norbt = 6
    nisht = 1
    nasht = 2
    n2ashx = 4
    iorb(1) = 0
    norb(1) = 6
    nish(1) = 1
    iash(1) = 0
    nash(1) = 2
    nocc(1) = 3

! infind.h
    ismo(1:norbt) = 1
    do i=1,norbt
        isx(i) = i
        isw(i) = i
    end do
    ich(1) = - 1
    ich(2) =  1
    ich(3) =  2
    ich(4:6) = 0
    iobtyp(1) = 2
    iobtyp(2:3) = 3
    iobtyp(4:6) = 4

! wrkrsp.h
    ksymop = 1

    allocate(this%h2(norbt, norbt)); this%h2 = 0
    allocate(this%fi(norbt, norbt)); this%fi = 0
    allocate(this%fa(norbt, norbt)); this%fa = 0
    allocate(this%q(norbt, nasht));  this%q = 0
    allocate(this%udv(nasht, nasht)); this%udv = 0
    allocate(this%pv(nasht, nasht, nasht, nasht)); this%pv = 0
    allocate(this%wrk(10))

end subroutine setUp

subroutine tearDown(this)
    class(type_rsphso), intent(inout) :: this
    deallocate(this%h2)
    deallocate(this%fi)
    deallocate(this%fa)
    deallocate(this%udv)
    deallocate(this%pv)
    deallocate(this%wrk)
end subroutine tearDown

subroutine out(f)
    use inforb_mod, only: norbt
    double precision f(norbt,norbt)
    call output(f,1,norbt,1,norbt,norbt,norbt,1,6)
end subroutine

@test
subroutine test_fi_c_zero_input(this)
    use rsphso_mod, only: append_to_fi_c
    class(type_rsphso), intent(inout) :: this


    this%h2 = 0d0
    this%fa = 0d0


    call append_to_fi_c(2, 1, this%h2, this%fi, this%wrk, size(this%wrk))
    @assertEqual(maxval(abs(this%fi)), 0d0)
end subroutine

@test
subroutine test_fi_x_zero_input(this)
    use rsphso_mod, only: append_to_fi_x
    class(type_rsphso), intent(inout) :: this


    this%h2 = 0d0
    this%fa = 0d0


    call append_to_fi_x(2, 1, this%h2, this%fi, this%wrk, size(this%wrk))
    @assertEqual(maxval(abs(this%fi)), 0d0)
end subroutine

@test
subroutine test_fa_c_zero_input(this)
    use rsphso_mod, only: append_to_fa_c
    class(type_rsphso), intent(inout) :: this


    this%h2 = 0d0
    this%fa = 0d0


    call append_to_fa_c(2, 1, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))
    @assertEqual(maxval(abs(this%fa)), 0d0)
end subroutine

@test
subroutine test_fa_x_zero_input(this)
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this


    this%h2 = 0d0
    this%fa = 0d0


    @assertEqual(maxval(abs(this%fa)), 0d0)
    call append_to_fa_x(2, 1, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))
end subroutine


@test
subroutine test_append_to_q1_zero_input(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call update_q1(this%q, this%h2, 2, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_zero_input(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call update_q1(this%q, this%h2, 2, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fi_c_xx21(this)
    use rsphso_mod, only: append_to_fi_c
    class(type_rsphso), intent(inout) :: this
    double precision:: ref_fc(6, 6) = 0d0


    this%h2 = 1d0
    this%fi = 0d0
    ref_fc(2, 1) = 2d0
    ref_fc(1, 2) = -2d0

    call append_to_fi_c(2, 1, this%h2, this%fi, this%wrk, size(this%wrk))
    @assertEqual(0d0, maxval(abs(this%fi - ref_fc)))
end subroutine

@test
subroutine test_append_to_fi_x_xx21(this)
    use rsphso_mod, only: append_to_fi_x
    class(type_rsphso), intent(inout) :: this
    double precision:: ref_fc(6, 6) = 0d0


    this%h2 = 1d0
    this%fi = 0d0
    ref_fc(2, :) = -3
    ref_fc(:, 2) = 3
    ref_fc(2, 2) = 0

    call append_to_fi_x(2, 1, this%h2, this%fi, this%wrk, size(this%wrk))
    @assertEqual(0d0, maxval(abs(this%fi - ref_fc)))
end subroutine

@test
subroutine test_append_to_fa_c_xx21s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=2, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
subroutine test_append_to_fa_c_xx21t(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=2, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx21(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=2, d=1, ca=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, d) = -1.5*this%h2(:, c)
    ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx21(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 2, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_2321(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=2, ca=1, d=1, qa=1, x=2, xa=1, y=3, ya=2

    double precision ref_q(norbt, nasht) 
    ref_q = 0

    this%h2(x,y) = 2
    this%pv(xa,ya,qa,ca) = 3
    ref_q(d,qa) = -6
    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx31s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
subroutine test_append_to_fa_c_xx31t(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_x_xx31(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=1, ca=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, d) = -1.5*this%h2(:, c)
    ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx31(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this
    
    integer :: c=3, d=1

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx31(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, ca=2, d=1, qa=1, x=2, xa=1, y=3, ya=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x,y) = 2
    this%pv(xa,ya,qa,ca) = 3
    ref_q(d,qa) = -6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx41s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx41t(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx41(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    !ref_fa(:, d) = -1.5*this%h2(:, c)
    !ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_q1_xx41(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 4, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx41(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=1

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx51s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx51(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx51(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    !ref_fa(:, d) = -1.5*this%h2(:, c)
    !ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx51(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 5, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx51(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=1

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx61(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx61s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx61(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=1

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    !ref_fa(:, d) = -1.5*this%h2(:, c)
    !ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx61(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 6, 1, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx61(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=1

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q1_32(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht)
    ref_q = 0

    call update_q1(this%q, this%h2, 3, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q1_1232a(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0
    ! q(1,2) = (12|32) d(1,1,2,1)

    this%h2(1, 2) = 7
    this%pv(1, 1, 2, 1) = 9
    ref_q(1, 1) = 63

    call update_q1(this%q, this%h2, 3, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q1_1232b(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0
    ! q(1,2) = (12|32) d(1,1,2,1)

    this%h2(1, 2) = 7
    this%pv(1, 1, 1, 2) = 9
    ref_q(1, 1) = -63

    call update_q1(this%q, this%h2, 3, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx32(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx32s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx32(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, d) =  ref_fa(:,d) - 1.5*this%h2(:, c)
    ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q3_xx32(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=3, d=2, ca=2, da=1
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    this%pv(xa, ya, qa, ca) = 4
    ref_q(c, qa) = 6
    ref_q(d, qa) = -8

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx42s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx42(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx42(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx42(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 4, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx42(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=2, da=1
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx52s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx52(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx52(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx52(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 5, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx52(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=2, da=1
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx62s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx62(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx62(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx62(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 6, 2, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx62(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=2, da=1
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx43s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx43(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx43(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=2

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx43(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 4, 3, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx43(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=4, d=3, da=2
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx53s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx53(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx53(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

subroutine test_append_to_q1_xx53(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 5, 3, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx53(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=3, da=2
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx63s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 60
    ref_fa(d, c) = -60
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx63(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(c, d) = 30
    ref_fa(d, c) = -30
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx63(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=3

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    ref_fa(:, c) =  ref_fa(:,c) + 1.5*this%h2(:, d)
    ref_fa(c, :) =  ref_fa(c,:) - 1.5*this%h2(d, :)
    ref_fa(4:, 4:) = 0
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q3_xx63(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=3, da=2
    integer :: x=3, y=2, xa=2, ya=1, qa=2

    double precision, dimension(norbt, nasht) :: ref_q
    ref_q = 0

    this%h2(x, y) = 2
    this%pv(xa, ya, qa, da) = 3
    ref_q(c, qa) = 6

    call update_q3(this%q, this%h2, c, d, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_x_xx54(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=5, d=4

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx54(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 5, 4, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx54(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q3(this%q, this%h2, 5, 4, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx64s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=4

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx64(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=4

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx64(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=4

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    !ref_fa(:, d) = -1.5*this%h2(:, c)
    !ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx64(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 6, 4, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx64(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q3(this%q, this%h2, 6, 4, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_fa_c_xx65s(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=5

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .false.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))
    @assertEqual(ref_fa, this%fa)

end subroutine
@test
subroutine test_append_to_fa_c_xx65(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_c
    use infrsp_mod, only: trplet
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=5

    double precision ref_fa(norbt, norbt); ref_fa = 0

    this%h2(2:3, 2:3) = reshape((/1, 2, 3, 4/), (/2, 2/))
    this%udv = reshape((/1, 2, 3, 4/), (/2, 2/))
    trplet = .true.
    call append_to_fa_c(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_fa_x_xx65(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: append_to_fa_x
    class(type_rsphso), intent(inout) :: this

    integer :: c=6, d=5

    double precision ref_fa(norbt, norbt); ref_fa = 0

    call random_number(this%h2)
    this%h2 = this%h2 + transpose(this%h2)
    this%udv = reshape((/1, 0, 0, 1/), (/2, 2/))
    call append_to_fa_x(c, d, this%h2, this%fa, this%udv, this%wrk, size(this%wrk))

    !ref_fa(:, d) = -1.5*this%h2(:, c)
    !ref_fa(d, :) =  ref_fa(d,:) + 1.5*this%h2(c, :)
    @assertEqual(ref_fa, this%fa)

end subroutine

@test
subroutine test_append_to_q1_xx65(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q1
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q1(this%q, this%h2, 6, 5, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_append_to_q3_xx65(this)
    use inforb_mod, only: norbt, nasht
    use rsphso_mod, only: update_q3
    class(type_rsphso), intent(inout) :: this

    double precision ref_q(norbt, nasht); ref_q = 0

    call random_number(this%h2)
    call random_number(this%pv)
    call update_q3(this%q, this%h2, 6, 5, this%pv)
    @assertEqual(ref_q, this%q)

end subroutine

@test
subroutine test_getac1(this)
    use inforb_mod, only: nasht
    class(type_rsphso), intent(inout) :: this

    double precision h2x(nasht, nasht)
    call random_number(this%h2)
    call getac1(this%h2, h2x)
    @assertEqual(this%h2(2:3, 2:3), h2x)

end subroutine

@test
subroutine test_type(this)
    use inforb_mod, only: nasht, norbt
    use focktype_mod
    class(type_rsphso), intent(inout) :: this
    type(mofock):: focks
    
    call focks%allocate()
    @assertEqual(shape(focks%fi), (/norbt, norbt/))
    call focks%deallocate()
end subroutine    

end module test_so_fock

