module test_rsp
use pfunit_mod
use wrkrsp_mod
use infhyp_mod
use rsp_queries
implicit none

@testcase
    type, extends(TestCase) :: type_rsp
    contains
        procedure :: setUp
    end type
contains

subroutine setUp(this)
    class(type_rsp), intent(inout) :: this
end subroutine setUp


@test
subroutine test_orbital_gradient(this)
    class(type_rsp), intent(inout) :: this
    kzwopt = 1
    @assertTrue(is_orbital_gradient())
end subroutine test_orbital_gradient

@test
subroutine test_no_orbital_gradient(this)
    class(type_rsp), intent(inout) :: this
    kzwopt = 0
    @assertFalse(is_orbital_gradient())
end subroutine test_no_orbital_gradient

@test
subroutine test_configuration_gradient(this)
    class(type_rsp), intent(inout) :: this
    kzconf = 2
    @assertTrue(is_configuration_gradient())
end subroutine test_configuration_gradient

@test
subroutine test_no_configuration_gradient(this)
    class(type_rsp), intent(inout) :: this
    kzconf = 0
    @assertFalse(is_configuration_gradient())
end subroutine test_no_configuration_gradient

@test
subroutine test_configuration_gradient_symmetry_1(this)
    class(type_rsp), intent(inout) :: this
    kzconf = 1
    ksymop = 1
    @assertFalse(is_configuration_gradient())
end subroutine test_configuration_gradient_symmetry_1

@test
subroutine test_quadratic_response(this)
    class(type_rsp), intent(inout) :: this
    hypcal = .true.
    somom = .false.
    exmom = .false.
    @assertTrue(is_quadratic_response())
    hypcal = .false.
    somom = .true.
    exmom = .false.
    @assertTrue(is_quadratic_response())
    hypcal = .false.
    somom = .false.
    exmom = .true.
    @assertTrue(is_quadratic_response())
    hypcal = .false.
    somom = .false.
    exmom = .false.
    @assertFalse(is_quadratic_response())
end subroutine test_quadratic_response
        

end module test_rsp
